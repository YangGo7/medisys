// src/components/EMR/PatientRegistrationForm.jsx - 완전 개선된 자동 ID 버전

import React, { useState } from 'react';

const PatientRegistrationForm = () => {
  const [formData, setFormData] = useState({
    givenName: '',
    familyName: '',
    middleName: '',
    gender: '',
    birthdate: '',
    address: {
      address1: '',
      address2: '',
      cityVillage: '',
      stateProvince: '',
      country: '',
      postalCode: ''
    }
    // 🔥 patient_identifier 필드 완전 제거
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [message, setMessage] = useState('');

  const handleSubmit = async (e) => {
  e.preventDefault();
  setIsSubmitting(true);
  setMessage('');

  try {
    // 🔥 전체 URL로 수정
    const response = await fetch('http://127.0.0.1:8000/api/integration/patients/create-auto-id/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // CSRF 토큰 제거 (CORS 요청이므로 불필요)
      },
      body: JSON.stringify(formData),
    });

    console.log('Response status:', response.status);
    console.log('Response headers:', response.headers);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('Response data:', data);

    if (data.success) {
      const autoGeneratedId = data.patient.patient_identifier;
      const mappingInfo = data.mapping_created ? ' (환자 매핑 생성됨)' : '';
      const idGenInfo = data.openmrs_idgen_used ? ' (OpenMRS IdGen 사용)' : '';
      
      setMessage({
        type: 'success',
        text: `✅ 환자 등록 성공! 자동 생성 ID: ${autoGeneratedId}${mappingInfo}${idGenInfo}`
      });
      
      // 폼 초기화
      resetForm();
      console.log('생성된 환자:', data.patient);
      
    } else {
      setMessage({
        type: 'error',
        text: data.error || '환자 등록에 실패했습니다.'
      });
    }
  } catch (error) {
    console.error('환자 등록 오류:', error);
    setMessage({
      type: 'error',
      text: `서버 연결 오류: ${error.message}`
    });
  } finally {
    setIsSubmitting(false);
  }
};

  const resetForm = () => {
    setFormData({
      givenName: '',
      familyName: '',
      middleName: '',
      gender: '',
      birthdate: '',
      address: {
        address1: '',
        address2: '',
        cityVillage: '',
        stateProvince: '',
        country: '',
        postalCode: ''
      }
    });
    setMessage('');
  };

  const handleInputChange = (field, value) => {
    if (field.includes('.')) {
      // 중첩된 객체 필드 처리 (address.address1 등)
      const [parent, child] = field.split('.');
      setFormData(prev => ({
        ...prev,
        [parent]: {
          ...prev[parent],
          [child]: value
        }
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [field]: value
      }));
    }
  };

  const getCsrfToken = () => {
    return document.querySelector('[name=csrfmiddlewaretoken]')?.value || '';
  };

  return (
    <div className="patient-registration-form" style={{ maxWidth: '600px', margin: '0 auto', padding: '20px' }}>
      <h2 style={{ textAlign: 'center', marginBottom: '20px' }}>환자 등록</h2>
      
      {/* 자동 ID 생성 안내 */}
      <div className="auto-id-notice" style={{ 
        padding: '15px', 
        marginBottom: '20px', 
        backgroundColor: '#e7f3ff', 
        border: '1px solid #b3d9ff',
        borderRadius: '8px',
        textAlign: 'center'
      }}>
        <h4 style={{ margin: '0 0 10px 0', color: '#0066cc' }}>🆔 자동 ID 생성</h4>
        <p style={{ margin: 0, color: '#004d99' }}>
          환자 ID는 OpenMRS에서 자동으로 생성됩니다. 별도로 입력할 필요가 없습니다.
        </p>
      </div>

      {/* 메시지 표시 */}
      {message && (
        <div className={`message ${message.type}`} style={{ 
          padding: '15px', 
          margin: '15px 0', 
          borderRadius: '8px',
          backgroundColor: message.type === 'success' ? '#d4edda' : '#f8d7da',
          color: message.type === 'success' ? '#155724' : '#721c24',
          border: `2px solid ${message.type === 'success' ? '#c3e6cb' : '#f5c6cb'}`,
          fontWeight: 'bold'
        }}>
          {message.text}
        </div>
      )}

      <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', gap: '15px' }}>
        {/* 필수 정보 */}
        <fieldset style={{ border: '1px solid #ddd', borderRadius: '8px', padding: '20px' }}>
          <legend style={{ fontWeight: 'bold', color: '#333' }}>필수 정보</legend>
          
          <div className="form-group">
            <label htmlFor="givenName" style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
              이름 *:
            </label>
            <input
              type="text"
              id="givenName"
              value={formData.givenName}
              onChange={(e) => handleInputChange('givenName', e.target.value)}
              required
              placeholder="환자의 이름을 입력하세요"
              style={{ 
                width: '100%', 
                padding: '10px', 
                borderRadius: '4px', 
                border: '1px solid #ccc',
                fontSize: '16px'
              }}
            />
          </div>

          <div className="form-group">
            <label htmlFor="familyName" style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
              성 *:
            </label>
            <input
              type="text"
              id="familyName"
              value={formData.familyName}
              onChange={(e) => handleInputChange('familyName', e.target.value)}
              required
              placeholder="환자의 성을 입력하세요"
              style={{ 
                width: '100%', 
                padding: '10px', 
                borderRadius: '4px', 
                border: '1px solid #ccc',
                fontSize: '16px'
              }}
            />
          </div>

          {/* <div className="form-group">
            <label htmlFor="middleName" style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
              중간 이름:
            </label>
            <input
              type="text"
              id="middleName"
              value={formData.middleName}
              onChange={(e) => handleInputChange('middleName', e.target.value)}
              placeholder="중간 이름 (선택사항)"
              style={{ 
                width: '100%', 
                padding: '10px', 
                borderRadius: '4px', 
                border: '1px solid #ccc',
                fontSize: '16px'
              }}
            />
          </div> */}

          <div className="form-group">
            <label htmlFor="gender" style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
              성별 *:
            </label>
            <select
              id="gender"
              value={formData.gender}
              onChange={(e) => handleInputChange('gender', e.target.value)}
              required
              style={{ 
                width: '100%', 
                padding: '10px', 
                borderRadius: '4px', 
                border: '1px solid #ccc',
                fontSize: '16px'
              }}
            >
              <option value="">성별을 선택하세요</option>
              <option value="M">남성</option>
              <option value="F">여성</option>
            </select>
          </div>

          <div className="form-group">
            <label htmlFor="birthdate" style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
              생년월일 *:
            </label>
            <input
              type="date"
              id="birthdate"
              value={formData.birthdate}
              onChange={(e) => handleInputChange('birthdate', e.target.value)}
              required
              style={{ 
                width: '100%', 
                padding: '10px', 
                borderRadius: '4px', 
                border: '1px solid #ccc',
                fontSize: '16px'
              }}
            />
          </div>
        </fieldset>

        {/* 주소 정보 (선택적) */}
        <fieldset style={{ border: '1px solid #ddd', borderRadius: '8px', padding: '20px' }}>
          <legend style={{ fontWeight: 'bold', color: '#333' }}>주소 정보 (선택사항)</legend>
          
          <div className="form-group">
            <label htmlFor="address1" style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
              주소 1:
            </label>
            <input
              type="text"
              id="address1"
              value={formData.address.address1}
              onChange={(e) => handleInputChange('address.address1', e.target.value)}
              placeholder="기본 주소"
              style={{ 
                width: '100%', 
                padding: '10px', 
                borderRadius: '4px', 
                border: '1px solid #ccc',
                fontSize: '16px'
              }}
            />
          </div>

          <div className="form-group">
            <label htmlFor="address2" style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
              주소 2:
            </label>
            <input
              type="text"
              id="address2"
              value={formData.address.address2}
              onChange={(e) => handleInputChange('address.address2', e.target.value)}
              placeholder="상세 주소"
              style={{ 
                width: '100%', 
                padding: '10px', 
                borderRadius: '4px', 
                border: '1px solid #ccc',
                fontSize: '16px'
              }}
            />
          </div>

          <div className="form-group">
            <label htmlFor="cityVillage" style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
              도시:
            </label>
            <input
              type="text"
              id="cityVillage"
              value={formData.address.cityVillage}
              onChange={(e) => handleInputChange('address.cityVillage', e.target.value)}
              placeholder="도시명"
              style={{ 
                width: '100%', 
                padding: '10px', 
                borderRadius: '4px', 
                border: '1px solid #ccc',
                fontSize: '16px'
              }}
            />
          </div>

          <div className="form-group">
            <label htmlFor="stateProvince" style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
              시/도:
            </label>
            <input
              type="text"
              id="stateProvince"
              value={formData.address.stateProvince}
              onChange={(e) => handleInputChange('address.stateProvince', e.target.value)}
              placeholder="시/도"
              style={{ 
                width: '100%', 
                padding: '10px', 
                borderRadius: '4px', 
                border: '1px solid #ccc',
                fontSize: '16px'
              }}
            />
          </div>

          <div className="form-group">
            <label htmlFor="country" style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
              국가:
            </label>
            <input
              type="text"
              id="country"
              value={formData.address.country}
              onChange={(e) => handleInputChange('address.country', e.target.value)}
              placeholder="국가"
              style={{ 
                width: '100%', 
                padding: '10px', 
                borderRadius: '4px', 
                border: '1px solid #ccc',
                fontSize: '16px'
              }}
            />
          </div>

          <div className="form-group">
            <label htmlFor="postalCode" style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>
              우편번호:
            </label>
            <input
              type="text"
              id="postalCode"
              value={formData.address.postalCode}
              onChange={(e) => handleInputChange('address.postalCode', e.target.value)}
              placeholder="우편번호"
              style={{ 
                width: '100%', 
                padding: '10px', 
                borderRadius: '4px', 
                border: '1px solid #ccc',
                fontSize: '16px'
              }}
            />
          </div>
        </fieldset>

        {/* 버튼들 */}
        <div className="form-actions" style={{ 
          display: 'flex', 
          gap: '10px', 
          justifyContent: 'center',
          marginTop: '20px'
        }}>
          <button 
            type="submit" 
            disabled={isSubmitting}
            style={{ 
              padding: '15px 30px', 
              backgroundColor: isSubmitting ? '#ccc' : '#007bff',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              cursor: isSubmitting ? 'not-allowed' : 'pointer',
              fontSize: '16px',
              fontWeight: 'bold',
              minWidth: '200px'
            }}
          >
            {isSubmitting ? '등록 중...' : '🆔 자동 ID로 환자 등록'}
          </button>
          
          <button 
            type="button" 
            onClick={resetForm}
            disabled={isSubmitting}
            style={{ 
              padding: '15px 30px', 
              backgroundColor: '#6c757d',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              cursor: isSubmitting ? 'not-allowed' : 'pointer',
              fontSize: '16px',
              fontWeight: 'bold'
            }}
          >
            초기화
          </button>
        </div>
      </form>

      {/* 개발용 디버깅 정보 */}
      {process.env.NODE_ENV === 'development' && (
        <details style={{ 
          marginTop: '30px', 
          padding: '15px', 
          backgroundColor: '#f8f9fa', 
          border: '1px solid #dee2e6',
          borderRadius: '8px'
        }}>
          <summary style={{ fontWeight: 'bold', cursor: 'pointer' }}>
            개발자 정보 (클릭해서 보기)
          </summary>
          <pre style={{ marginTop: '10px', fontSize: '12px' }}>
            {JSON.stringify(formData, null, 2)}
          </pre>
        </details>
      )}
    </div>
  );
};

export default PatientRegistrationForm;