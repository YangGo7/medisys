events {}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

  access_log /var/log/nginx/access.log main;
  error_log /var/log/nginx/error.log warn;

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 2048;
  client_max_body_size 100M; # 대용량 파일 업로드/다운로드를 위해 필요할 수 있음

  ############################
  # 1. HTTP (80) -> HTTPS (443) 리다이렉션
  ############################
  server {
    listen 80;
    server_name meddocai.p-e.kr www.meddocai.p-e.kr;
    return 301 https://$host$request_uri;
  }

  ############################
  # 2. HTTPS 서버 (메인 서비스)
  ############################
  server {
    listen 443 ssl;
    server_name meddocai.p-e.kr www.meddocai.p-e.kr;

    ssl_certificate /etc/letsencrypt/live/meddocai.p-e.kr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/meddocai.p-e.kr/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # ########## 메인 웹 애플리케이션 (React 앱 정적 파일) ##########
    # Docker Compose로 마운트된 ./frontend/build 경로를 직접 서비스합니다.
    location / {
      root /usr/share/nginx/html; # React 앱 빌드 결과물이 서비스될 경로 (docker-compose.yml의 volumes에 정의됨)
      index index.html index.htm;
      try_files $uri $uri/ /index.html; # React SPA 라우팅을 위해 필수S
    }

    # ########## Django API 프록시 ##########
    # proxy_pass는 Django가 실행 중인 GCP VM의 내부 IP와 포트를 사용합니다.
    location /api/ {
      proxy_pass http://10.128.0.11:8000/;

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https; # 백엔드에 HTTPS 요청임을 알림

      # CORS Headers (프로덕션 환경에서는 특정 Origin으로 제한)
      add_header 'Access-Control-Allow-Origin' 'https://meddocai.p-e.kr' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
      add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, Dicom-Tags, X-CSRFToken, X-Requested-With' always;
      add_header 'Access-Control-Allow-Credentials' 'true' always;
      add_header 'Access-Control-Max-Age' 86400; # Preflight 요청 캐시 시간 (초 단위)

      if ($request_method = OPTIONS) {
        return 204; # Preflight 요청에 대한 응답
      }
    }

    # ########## DICOMWeb (Orthanc API for OHIF) ##########
    # OHIF Viewer의 `qidoRoot`, `wadoRoot`에 설정된 경로와 일치해야 합니다.
    location /dicom-web/ {
      proxy_pass http://orthanc:8042/dicom-web/; # Docker Compose 서비스 이름 'orthanc'
      
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;

      # Orthanc Basic 인증이 필요한 경우, 클라이언트에서 헤더를 보내거나 여기서 설정
      # proxy_set_header Authorization "Basic b3J0aGFuYzpvcnRoYW5j"; # 'orthanc:orthanc'의 base64 인코딩

      proxy_connect_timeout 60s;
      proxy_send_timeout 60s;
      proxy_read_timeout 60s;
      send_timeout 60s;

      # CORS Headers
      add_header 'Access-Control-Allow-Origin' 'https://meddocai.p-e.kr' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
      add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, Dicom-Tags, X-Requested-With' always;
      add_header 'Access-Control-Allow-Credentials' 'true' always;
      add_header 'Access-Control-Max-Age' 86400;

      if ($request_method = OPTIONS) {
        return 204;
      }
    }

    # ########## WADO URI support (Legacy for Orthanc) ##########
    # OHIF Viewer의 `wadoUriRoot`에 설정된 경로와 일치해야 합니다.
    location /wado { # Orthanc의 WADO-URI 경로는 보통 /wado
      proxy_pass http://orthanc:8042/wado;
      proxy_set_header Authorization ""; # 클라이언트에서 Authorization 헤더를 보내지 않는 경우 (Orthanc 설정에 따라 다름)
      proxy_set_header X-Forwarded-Proto https;

      # CORS Headers
      add_header 'Access-Control-Allow-Origin' 'https://meddocai.p-e.kr' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
      add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization, X-Requested-With' always;
      add_header 'Access-Control-Allow-Credentials' 'true' always;
      add_header 'Access-Control-Max-Age' 86400;

      if ($request_method = OPTIONS) {
        return 204;
      }
    }

    # ########## Orthanc 웹 UI (for PacsExplorer2) ##########
    # PacsExplorer2.jsx에서 `pacsUrl`에 설정된 경로와 일치해야 합니다.
    location /orthanc-ui/ { # 예시: 'https://meddocai.p-e.kr/orthanc-ui/app/' 와 매칭
      proxy_pass http://orthanc:8042/ui/app/; # Orthanc 컨테이너의 실제 웹 UI 경로
      
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;

      # Orthanc 웹 UI에 Basic Auth가 필요하다면 Nginx에서 헤더를 추가합니다.
      proxy_set_header Authorization "Basic b3J0aGFuYzpvcnRoYW5j"; # 'orthanc:orthanc'를 base64 인코딩

      # CORS Headers (웹 UI는 브라우저에서 직접 요청하므로 필요)
      add_header 'Access-Control-Allow-Origin' 'https://meddocai.p-e.kr' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
      add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
      add_header 'Access-Control-Allow-Credentials' 'true' always;
      add_header 'Access-Control-Max-Age' 86400;

      if ($request_method = OPTIONS) {
        return 204;
      }
    }
    
    # ########## Flask AI 분석 서버 (AI Service) ##########
    location /ai-service/ { # /ai-service/ 로 시작하는 요청을 받음
        proxy_pass http://ai-service:5000/; # Docker 내부 네트워크의 ai-service 컨테이너로 전달
                                           # (이때 /ai-service/ 접두사는 제거되어 전달됨)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS Headers (기존 코드에서 복사)
        add_header 'Access-Control-Allow-Origin' '*' always; # 실제 배포 시 특정 도메인으로 변경
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Max-Age' 86400;

        # OPTIONS 요청 처리 (CORS Pre-flight)
        if ($request_method = OPTIONS) {
            return 204;
        }
    }

    # Let's Encrypt를 위한 /.well-known 경로 (인증서 갱신 시 필요)
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
  }
}